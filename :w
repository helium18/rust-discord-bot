use serenity::async_trait;
use serenity::client::{Client, EventHandler};
use serenity::framework::standard::macros::command;
use serenity::framework::standard::{macros::group, StandardFramework};
use serenity::model::channel::Message;
use serenity::model::prelude::Ready;
use serenity::prelude::Context;

#[group]
#[command(ping)]
struct General;

struct Handler;

#[async_trait]
impl EventHandler for Handler {
    async fn message(&self, ctx: Context, msg: Message) {
        if msg.content.to_lowercase().contains("cock") {
            msg.reply(ctx, "I wanna sex so bad :weary:").await.unwrap();
        }
    }

    async fn ready(&self, _: Context, ready: Ready) {
        println!("{} is connected!", ready.user.name);
    }
}

#[tokio::main]
async fn main() {
    let framework = StandardFramework::new()
        .configure(|c| c.prefix("%")) // set the bot's prefix to "~"
        .group(&GENERAL_GROUP);

    // Login with a bot token from the environment
    let token = "ODgzOTU4MDg4NTk0NDg5Mzk0.YTRgHw.8Ub0NfBAhGhrhFgLSHPu0OuhD3c";
    let mut client = Client::builder(token)
        .event_handler(Handler)
        .framework(framework)
        .await
        .expect("Error creating client");

    // start listening for events by starting a single shard
    if let Err(why) = client.start().await {
        println!("An error occurred while running the client: {:?}", why);
    }
}
